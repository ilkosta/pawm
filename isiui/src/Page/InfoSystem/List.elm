module Page.InfoSystem.List exposing 
  ( Model
  , Msg
  , init, update, view, subscriptions)

import Html exposing (Html,div,h3,text,button,table,tr,td,th,a)
import Html.Attributes exposing (href)

import Html.Events exposing (onClick)

import Http

import Json.Decode as Decode
import Data.InfoSysSummary exposing (InfoSysId, decoder)
import RemoteData exposing (WebData)
import RemoteData.Http exposing (defaultConfig)
import Route exposing (Route)
import Data.InfoSysSummary as InfoSysSummary exposing (InfoSysSummary)
import Api exposing (apiConfig)
import Session.Session as Session
import Data.BasePageData as BasePageData
import Url

type alias DT = List InfoSysSummary.InfoSysSummary

type alias Model =
    BasePageData.BaseDataModel DT


type Msg
    = FetchInfosystems
    | InfosysReceived (WebData DT)
    


init : Session.Model -> ( Model, Cmd Msg )
init session =
  let 
    (model, _ ) = BasePageData.init session
  in
    ( {model | data = RemoteData.Loading}, fetchIS session )





fetchIS : Session.Model -> Cmd Msg
fetchIS session =
  let
    urlStr = Session.getApi session |> Url.toString
  in
    RemoteData.Http.getWithConfig (apiConfig session.session)
      (urlStr ++ "info_system")
      InfosysReceived (Data.InfoSysSummary.decoder |> Decode.list)

    -- Http.get
    --     { url = "http://localhost:5019/posts/"
    --     , expect =
    --         postsDecoder
    --             |> Http.expectJson (RemoteData.fromResult >> PostsReceived)
    --     }


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        FetchInfosystems ->
            ( { model | data = RemoteData.Loading }
            , fetchIS model.session
            )

        InfosysReceived data ->
            ( { model | data = data }, Cmd.none )
        




-- VIEWS


view : Model -> Html Msg
view model =
    div []
        [ button [ onClick FetchInfosystems ]
            [ text "Refresh posts" ]
        , viewInfoSys model.data
        ]


viewInfoSys : WebData DT -> Html Msg
viewInfoSys posts =
    case posts of
        RemoteData.NotAsked ->
            text ""

        RemoteData.Loading ->
            h3 [] [ text "Loading..." ]

        RemoteData.Success actualPosts ->
            div []
                [ h3 [] [ text "Posts" ]
                , table []
                    (viewTableHeader :: (List.map viewIS actualPosts))
                ]

        RemoteData.Failure httpError ->
            viewFetchError (buildErrorMessage httpError)


viewTableHeader : Html Msg
viewTableHeader =
    tr []
        [ th []
            [ text "ID" ]
        , th []
            [ text "Title" ]
        , th []
            [ text "Author" ]
        ]


viewIS : InfoSysSummary -> Html Msg
viewIS sys =
    let
        isPath =
            "/sistema/" ++ Data.InfoSysSummary.idToString sys.id
    in
    tr []
        [ td []
            [ text (Data.InfoSysSummary.idToString sys.id) ]
        , td []
            [ text sys.name ]
        , td []
            [ a [ href isPath ] [ text "Modifica" ] ]
        ]


viewFetchError : String -> Html Msg
viewFetchError errorMessage =
    let
        errorHeading =
            "Couldn't fetch posts at this time."
    in
    div []
        [ h3 [] [ text errorHeading ]
        , text ("Error: " ++ errorMessage)
        ]


buildErrorMessage : Http.Error -> String
buildErrorMessage httpError =
    case httpError of
        Http.BadUrl message ->
            message

        Http.Timeout ->
            "Server is taking too long to respond. Please try again later."

        Http.NetworkError ->
            "Unable to reach server."

        Http.BadStatus statusCode ->
            "Request failed with status code: " ++ String.fromInt statusCode

        Http.BadBody message ->
            message

{-| 
Subscriptions scope:

- listen to an event generated by a Javascript code
- encode the event to a message
- send the message to `update`

Subscriptions allow us to listen to external events such as incoming WebSocket messages, 
clock tick events, mouse/keyboard events, geolocation changes, 
and an output generated by a JavaScript library.

Subscription ask the Elm runtime to listen for the specified event 
and then send the corresponding message to update the model
-}

subscriptions : Model -> Sub Msg
subscriptions _ =
  Sub.none